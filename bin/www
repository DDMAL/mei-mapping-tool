#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const connect = require('../dbconnect');
const bodyParser = require('body-parser');
var debug = require('debug')('express-node-mongo-skeleton:server');
var http = require('http');

var env_config = require('dotenv').config()

var logger = require('../logger');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8800');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server, {

});

io.on("connection", (socket) => {
  console.log('a user connected');
  socket.on('disconnect', () => {
    console.log('a user disconnected');
  });
  socket.on("neume edit", function(msg) {
    console.log("message: "  + msg[0] + '\t\t\tattr:' + msg[2] + '\t\t\tid: ' + msg[1].split('_')[1]);
    // socket.broadcast.emit("received", { message: msg  });
    connect.then(db => {
      console.log('connected correctly to the server');
      mongoose.model('neume').findById(msg[1].split('_')[1], (err, neume) => {
        if (err) {console.log(err)}
        neume.updateOne({[msg[2]]: msg[0]}, (err, element) => {
          if (err) {
            return err
          }
        });
      })
    })
  });

  socket.on("neume mei edit", function(msg) {
    console.log("message: "  + msg[0] + '\t\t\tattr:' + msg[2] + '\t\t\tid: ' + msg[1].split('_')[1]);
    // socket.broadcast.emit("received", { message: msg  });
    connect.then(db => {
      console.log('connected correctly to the server');
      mongoose.model('neume').findById(msg[1].split('_')[1], (err, neume) => {
        if (err) {console.log(err)}
        neume.updateOne({'mei': msg[0]}, (err, element) => {
          if (err) {
            return err
          }
        });
      })
    })
  });

});


/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


console.log('\nCress is running on port:', process.env.PORT, '\nPort config is stored in the project root file ".env"\n');




/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
