#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const connect = require('../dbconnect');
const { xlsxAdd, csvUpload } = require('../csv_upload');
const bodyParser = require('body-parser');
const express = require('express');
var debug = require('debug')('express-node-mongo-skeleton:server');
var http = require('http');
const mongoose = require('mongoose');
// var db = require('../model/db');
var env_config = require('dotenv').config()

var logger = require('../logger');


const sharp = require('sharp');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8800');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server, {
  maxHttpBufferSize: 2000000
});
// const socketioAuth = require("socketio-auth");

// const authenticate = async (client, data, callback) => {
//   const {username, password} = data;
//   console.log('authetication');
//   try {
//     const user = await mongoose.model('user').findOne({'username': username});
//     callback(null, user && user['password'] == password);
//   } catch (err) {
//     callback(err);
//   }
// }
//
// const postAuthenticate = client => {
//   console.log('\n\n\nwhat ok\n\n\n');
// }



io.on("connection", (socket) => {
  console.log('a user connected');
  socket.on('disconnect', () => {
    console.log('a user disconnected');
  });
  // socketioAuth(io, {authenticate, postAuthenticate});
  socket.on("neume edit", function(msg) {
    console.log("message: "  + msg[0] + '\t\t\tattr:' + msg[2] + '\t\t\tid: ' + msg[1].split('_')[1]);
    // socket.broadcast.emit("received", { message: msg  });
    connect.then(db => {
      console.log('connected correctly to the server');
      mongoose.model('neume').findById(msg[1].split('_')[1], (err, neume) => {
        if (err) {console.log(err)}
        neume.updateOne({[msg[2]]: msg[0]}, (err, element) => {
          if (err) {
            return err
          }
        });
      })
    })
  });

  socket.on("project name edit", function(msg) {
    console.log("message: "  + msg[0] + '\t\t\tid: ' + msg[1].split('_')[1]);
    // socket.broadcast.emit("received", { message: msg  });
    connect.then(db => {
      console.log('connected correctly to the server');
      mongoose.model('project').findById(msg[1].split('_')[1], (err, neume) => {
        if (err) {console.log(err)}
        neume.updateOne({'name': msg[0]}, (err, element) => {
          if (err) {
            return err
          }
        });
      })
    })
  });

  socket.on("neume add", function(msg) {
    // socket.broadcast.emit("received", { message: msg  });
    connect.then(db => {
      console.log('connected correctly to the server');
      mongoose.model('neume').create({
          name: '',
          folio: '',
          description: '',
          classification: '',
          mei: '',
          review: '',
          dob: '',
          imagePath: '',
          project: msg[1],
          neumeSection: '',
          neumeSectionName: '',
          source: '',
          genericName: ''

      }, function(err, neume) {
          if (err) {
              return renderError(res, err);
          } else {
            console.log(`message: created neume in project: ${msg[0]} (id: ${msg[1]})\t\t\tneume id: ${neume._id}`);
            console.log('neume row: ' + neume.row + ' - '+  typeof neume.row);
            socket.emit('new neume info', [msg[1], neume._id]);
          }
      })
    })
  });

  socket.on("neume delete", function(msg) {
    console.log("message: neume delete" + '\t\t\tid: ' + msg);
    // socket.broadcast.emit("received", { message: msg  });
    connect.then(db => {
      console.log('connected correctly to the server');
      mongoose.model('neume').findById(msg, (err, neume) => {
        if (err) {console.log(err)}
        neume.remove((err, neume) => {
          if (err) {
            return err
          } else {
            mongoose.model("storedImages").remove({
                neumeID: neume._id
            }, function(err, image) {
                // logger.log('info', image);
                if (err) {
                    return err;
                } else {
                    logger.log('info', "deleted stored image for neume");
                }
            });
          }
        });
      })
    })
  });

  socket.on('neume image add', function(imgBuf) {
    console.log('message: neume image add', imgBuf, imgBuf[1].name);
    let resizedImageData = '';
    let resizedBase64 = ''
    var mimType = 'image/jpeg';
    sharp(imgBuf[1])
      .resize(128,128, {
        fit: 'contain',
        background: "rgb(255,255,255,1)"
      })
      .toBuffer()
      .then(resImgBuf => {
        let resizedImageData = resImgBuf.toString('base64');
        let resizedBase64 = `data:${mimType};base64,${resizedImageData}`;

        //All the images (images) need to be pushed to an array field in mongodb
        mongoose.model('neume').findById(imgBuf[0], (err, neume) => {
            neume.updateOne({
              'imagesBinary': [resizedBase64.split(',')[1]],
              'imagePath': imgBuf[2]
            }, (err, element) => {
              if (err) {
                return err
              }
            });
          });
      })
      .catch(err => {
        console.log(err);
      })
  })

  socket.on('position array change', function(msg) {
    console.log('message: position array change')
    console.log(`projectID: ${msg[0]}\t\t\tlist: ${msg[1]}`)
    mongoose.model('project').findById(msg[0], (err, project) => {
      project.updateOne({
        'positionArray': msg[1]
      }, (err, e) => {
        if (err) {
          return err
        }
      });
    });
  })

  // msg: [project_id, spreadsheet_type, file_buffer]
  socket.on('spreadsheet upload', function(msg) {
    console.log('message: spreadsheet upload', msg);
    console.log('buffer size:', msg[2].length)

    mongoose.model('neume').find(
      {'project': msg[0]}, (err, neumes) => {
        console.log('found neumes');
        if (neumes.length != 0) {
          io.emit('append check');

          // Socket 'once' keeps from adding multiple instances every time a new spreadsheet is uploaded
          socket.once('append_delete', function(append) {
            if (!append) { // delete, then add neumes
              console.log('delete');
              mongoose.model('neume').deleteMany(
                {'project': msg[0]}, (err, result) => {
                  if (err) {
                    console.log(err);
                  } else {
                    console.log(result);
                  }
                });
            }
            if (msg[1] == '.xlsx') {
              console.log('calling xlsx add 1');
              xlsxAdd(msg[2], msg[0], socket);
            } else if (msg[1] == '.csv') {
              csvUpload(msg[2], msg[0], socket);
            }
            // add neumes from msg[2] (Buffer)

          })
        } else {
          if (msg[1] == '.xlsx') {
            console.log('calling xlsx add 2');
            xlsxAdd(msg[2], msg[0], socket);
          }
          else if (msg[1] == '.csv') {
            csvUpload(msg[2], msg[0], socket);
          }
        }


      })
    // mongoose.model('project').findById(msg[0], (err, project) => {
    //   project.updateOne({
    //     'csv': msg[2],
    //     'csv_type': msg[1]
    //   }, (err, element) => {
    //     if (err) {
    //       return err
    //     }
    //   });
    // });
  })

});


/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


console.log('\nCress is running on port:', process.env.PORT, '\nPort config is stored in the project root file ".env"\n');
console.log('\nMongo database is running on port:', process.env.MONGO_PORT, '\nPort config is stored in the project root file ".env"\n');




/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
